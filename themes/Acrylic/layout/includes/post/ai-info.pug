- let description = get_page_fill_description()

- let ai = page.ai
- let randomNum = theme.post_head_ai_description.randomNum
- let basicWordCount = theme.post_head_ai_description.basicWordCount
- let btnLink = theme.post_head_ai_description.btnLink
- let gptName = theme.post_head_ai_description.gptName
- let mode = theme.post_head_ai_description.mode
- let switchBtn = theme.post_head_ai_description.switchBtn
.post-ai-description
  .ai-title
    svg(xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='25px' height='25px' viewBox='0 0 48 48')
      title AI-摘要
      g(id='机器人' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd')
        path(d='M34.717885,5.03561087 C36.12744,5.27055371 37.079755,6.60373651 36.84481,8.0132786 L35.7944,14.3153359 L38.375,14.3153359 C43.138415,14.3153359 47,18.1768855 47,22.9402569 L47,34.4401516 C47,39.203523 43.138415,43.0650727 38.375,43.0650727 L9.625,43.0650727 C4.861585,43.0650727 1,39.203523 1,34.4401516 L1,22.9402569 C1,18.1768855 4.861585,14.3153359 9.625,14.3153359 L12.2056,14.3153359 L11.15519,8.0132786 C10.920245,6.60373651 11.87256,5.27055371 13.282115,5.03561087 C14.69167,4.80066802 16.024865,5.7529743 16.25981,7.16251639 L17.40981,14.0624532 C17.423955,14.1470924 17.43373,14.2315017 17.43948,14.3153359 L30.56052,14.3153359 C30.56627,14.2313867 30.576045,14.1470924 30.59019,14.0624532 L31.74019,7.16251639 C31.975135,5.7529743 33.30833,4.80066802 34.717885,5.03561087 Z M38.375,19.4902885 L9.625,19.4902885 C7.719565,19.4902885 6.175,21.0348394 6.175,22.9402569 L6.175,34.4401516 C6.175,36.3455692 7.719565,37.89012 9.625,37.89012 L38.375,37.89012 C40.280435,37.89012 41.825,36.3455692 41.825,34.4401516 L41.825,22.9402569 C41.825,21.0348394 40.280435,19.4902885 38.375,19.4902885 Z M14.8575,23.802749 C16.28649,23.802749 17.445,24.9612484 17.445,26.3902253 L17.445,28.6902043 C17.445,30.1191812 16.28649,31.2776806 14.8575,31.2776806 C13.42851,31.2776806 12.27,30.1191812 12.27,28.6902043 L12.27,26.3902253 C12.27,24.9612484 13.42851,23.802749 14.8575,23.802749 Z M33.1425,23.802749 C34.57149,23.802749 35.73,24.9612484 35.73,26.3902253 L35.73,28.6902043 C35.73,30.1191812 34.57149,31.2776806 33.1425,31.2776806 C31.71351,31.2776806 30.555,30.1191812 30.555,28.6902043 L30.555,26.3902253 C30.555,24.9612484 31.71351,23.802749 33.1425,23.802749 Z' id='形状结合' fill='#444444' fill-rule='nonzero')
    .ai-title-text AI-摘要
    if (switchBtn)
      #ai-Toggle 切换
    i.heofont.heo-icon-arrow-rotate-right
    #ai-tag
      if mode == "tianli"
        = "Tianli GPT"
      else
        = gptName + " GPT"
  .ai-explanation AI初始化中...
  .ai-btn-box
    .ai-btn-item 介绍自己
    .ai-btn-item 生成本文简介
    .ai-btn-item 推荐相关文章
    .ai-btn-item 前往主页
    .ai-btn-item#go-tianli-blog 前往tianli博客
  script(data-pjax).
    (function(){
      // 当前随机到的ai摘要到index
      let lastAiRandomIndex = -1;
      let animationRunning = true; // 标志变量，控制动画函数的运行
      // 当前gpt模式
      let mode = "#{mode}"
      // 刷新点击次数
      let refreshNum = 0
      // 记录上一次传递给aiAbstract的参数
      let prevParam;
      const aiTitleRefreshIcon = document.querySelector(".ai-title .heofont.heo-icon-arrow-rotate-right")
      const explanation = document.querySelector(".ai-explanation");
      const post_ai = document.querySelector(".post-ai-description");
      let ai_str = "";
      let ai_str_length = "";
      let delay_init = 600;
      let i = 0;
      let j = 0;
      let sto = [];
      let elapsed = 0;
      const animate = timestamp => {
        if (!animationRunning) {
          return; // 动画函数停止运行
        }
        if (!animate.start) animate.start = timestamp;
        elapsed = timestamp - animate.start;
        if (elapsed >= 20) {
          animate.start = timestamp;
          if (i < ai_str_length - 1) {
            let char = ai_str.charAt(i + 1);
            let delay = /[,.，。!?！？]/.test(char) ? 150 : 20;
            if (explanation.firstElementChild) {
              explanation.removeChild(explanation.firstElementChild);
            }
            explanation.innerHTML += char;
            let div = document.createElement("div");
            div.className = "ai-cursor";
            explanation.appendChild(div);
            i++;
            if (delay === 150) {
              document.querySelector(".ai-explanation .ai-cursor").style.opacity = "0";
            }
            if (i === ai_str_length - 1) {
              observer.disconnect(); // 暂停监听
              explanation.removeChild(explanation.firstElementChild);
            }
            sto[0] = setTimeout(() => {
              requestAnimationFrame(animate);
            }, delay);
          }
        } else {
          requestAnimationFrame(animate);
        }
      };
      const observer = new IntersectionObserver(
        entries => {
          let isVisible = entries[0].isIntersecting;
          animationRunning = isVisible; // 标志变量更新
          if (animationRunning) {
            delay_init = i === 0 ? 200 : 20;
            sto[1] = setTimeout(() => {
              if (j) {
                i = 0;
                j = 0;
              }
              if (i === 0) {
                explanation.innerHTML = ai_str.charAt(0);
              }
              requestAnimationFrame(animate);
            }, delay_init);
          }
        },
        { threshold: 0 }
      );
      function clearSTO() {
        if (sto.length) {
          sto.forEach(item => {
            if (item) {
              clearTimeout(item);
            }
          });
        }
      }
      function startAI(str, df = true) {
        i = 0; //重置计数器
        j = 1;
        clearSTO();
        animationRunning = false;
        elapsed = 0;
        observer.disconnect(); // 暂停上一次监听
        explanation.innerHTML = df ? "生成中. . ." : "请等待. . .";
        ai_str = str;
        ai_str_length = ai_str.length;
        observer.observe(post_ai); //启动新监听
      }

      async function aiAbstract(num = #{basicWordCount}) {
        i = 0; //重置计数器
        j = 1;
        clearSTO();
        animationRunning = false;
        elapsed = 0;
        observer.disconnect(); // 暂停上一次监听
        if (mode === "tianli") {
          num = Math.max(10, Math.min(2000, num));
          console.info(num)
          const options = {
            key: "#{theme.post_head_ai_description.key}",
            Referer: "#{theme.post_head_ai_description.Referer}"
          };
          const truncateDescription = ("#{pageTitle}" + "#{description}").trim().substring(0, num)

          const queryParams = `key=${options.key}&content=${truncateDescription}`;
          const requestOptions = {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Referer: options.Referer
            },
          };
          try {
            let animationInterval = null
            if (animationInterval) clearInterval(animationInterval);
            animationInterval = setInterval(() => {
              const animationText = "生成中" + ".".repeat(j);
              explanation.innerHTML = animationText;
              j = (j % 3) + 1; // 在 1、2、3 之间循环
            }, 500);
            const response = await fetch(`https://summary.tianli0.top/?${queryParams}`, requestOptions);
            const result = await response.json();
            const summary = result.summary.trim();
            setTimeout(() => {
              aiTitleRefreshIcon.style.opacity = "1";
            }, 300)
            startAI(summary);
            clearInterval(animationInterval)

          } catch (error) {
            console.error(error);
          }
        } else {
          const strArr = "#{ai}".split(",").map(item => item.trim()); // 将字符串转换为数组，去除每个字符串前后的空格
          if (strArr.length !== 1) {
            let randomIndex = Math.floor(Math.random() * strArr.length); // 随机生成一个索引
            while (randomIndex === lastAiRandomIndex) { // 如果随机到了上次的索引
              randomIndex = Math.floor(Math.random() * strArr.length); // 再次随机
            }
            lastAiRandomIndex = randomIndex; // 更新上次随机到的索引
            startAI(strArr[randomIndex]);
          } else {
            startAI(strArr[0])
          }
          setTimeout(() => {
            aiTitleRefreshIcon.style.opacity = "1";
          }, 600)
        }
      }

      function aiRecommend() {
        i = 0; //重置计数器
        j = 1;
        clearSTO();
        animationRunning = false;
        elapsed = 0;
        explanation.innerHTML = "生成中. . .";
        ai_str = "";
        ai_str_length = "";
        observer.disconnect(); // 暂停上一次监听
        sto[2] = setTimeout(() => {
          explanation.innerHTML = recommendList();
        }, 600);
      }
      function aiGoHome() {
        startAI("正在前往博客主页...", false);
        sto[2] = setTimeout(() => {
          pjax.loadUrl("/");
        }, 1000);
      }
      const ai_btn_item = document.querySelectorAll(".ai-btn-item");
      function Introduce() {
        if (mode == "tianli") {
          startAI("我是文章辅助AI: TianliGPT，点击下方的按钮，让我生成本文简介、推荐相关文章等。")
        } else {
          startAI("我是文章辅助AI: #{gptName} GPT，点击下方的按钮，让我生成本文简介、推荐相关文章等。")
        }
      }
      function aiTitleRefreshIconClick() {
        aiTitleRefreshIcon.click()
      }
      const aiFunctions = [Introduce, aiTitleRefreshIconClick, aiRecommend, aiGoHome];
      ai_btn_item.forEach((item, index) => {
        item.addEventListener("click", () => {
          aiFunctions[index]();
        });
      });

      function recommendList() {
        let thumbnail = document.querySelectorAll('.relatedPosts-list a');
        if (!thumbnail.length) {
          const cardRecentPost = document.querySelector('.card-widget.card-recent-post'); 
          if (!cardRecentPost) return '';

          thumbnail = cardRecentPost.querySelectorAll('.aside-list-item a');

          let list = '';
          for (let i = 0; i < thumbnail.length; i++) {
            const item = thumbnail[i];
            list += `<div class="ai-recommend-item"><span class="index">${i + 1}：</span><a href="javascript:;" onclick="pjax.loadUrl('${item.href}')" title="${item.title}" data-pjax-state="">${item.title}</a></div>`;
          }
          
          return `很抱歉，无法找到类似的文章，你也可以看看本站最新发布的文章：<br /><div class="ai-recommend">${list}</div>`;
        }

        let list = '';
        for (let i = 0; i < thumbnail.length; i++) {
          const item = thumbnail[i];
          list += `<div class="ai-recommend-item"><span>推荐${i + 1}：</span><a href="javascript:;" onclick="pjax.loadUrl('${item.href}')" title="${item.title}" data-pjax-state="">${item.title}</a></div>`;
        }

        return `推荐文章：<br /><div class="ai-recommend">${list}</div>`;
      }


      function changeShowMode() {
        if (mode === "tianli") {
          mode = "local";
          document.getElementById("ai-tag").innerHTML = "#{gptName} GPT";
          aiAbstract(#{basicWordCount});
        } else {
          mode = "tianli";
          document.getElementById("ai-tag").innerHTML = "Tianli GPT";

          const truncateDescription = ("#{title}" + "#{description}").trim().substring(0, #{basicWordCount});
          let value = Math.floor(Math.random() * #{randomNum}) + #{basicWordCount};
          while (value === prevParam || truncateDescription.length - value === prevParam) {
            value = Math.floor(Math.random() * #{randomNum}) + #{basicWordCount};
          }
          aiTitleRefreshIcon.style.opacity = "0.2";
          aiTitleRefreshIcon.style.transitionDuration = "0.3s";
          aiTitleRefreshIcon.style.transform = "rotate(" + 360 * refreshNum + "deg)";
          if (truncateDescription.length <= 1000) {
            let param = truncateDescription.length - Math.floor(Math.random() * #{randomNum});
            while (param === prevParam) {
              param = truncateDescription.length - Math.floor(Math.random() * #{randomNum});
            }
            aiAbstract(param);
            prevParam = param;
          } else {
            aiAbstract(value);
            prevParam = value;
          }
          refreshNum++;
        }
      }

      //- 监听tag点击事件
      document.getElementById("ai-tag").addEventListener("click", () => {
        if (mode === "tianli") {
          document.querySelectorAll(".ai-btn-item").forEach(item => item.style.display = "none");
          document.getElementById("go-tianli-blog").style.display = "block";
          startAI("你好，我是Tianli开发的摘要生成助理TianliGPT，是一个基于GPT-4的生成式AI。我在这里只负责摘要的预生成和显示，你无法与我直接沟通，如果你也需要一个这样的AI摘要接口，可以在下方购买。（暂未开放购买，敬请期待）")
        } else {
          document.getElementById("go-tianli-blog").style.display = "none";
          startAI("你好，我是本站摘要生成助理#{gptName} GPT，是一个基于GPT-4的生成式AI。我在这里只负责摘要的预生成和显示，你无法与我直接沟通。")
        }

      });

      aiTitleRefreshIcon.addEventListener("click", () => {
        const truncateDescription = ("#{title}" + "#{description}").trim().substring(0, #{basicWordCount});
        let value = Math.floor(Math.random() * #{randomNum}) + #{basicWordCount};
        while (value === prevParam || truncateDescription.length - value === prevParam) {
          value = Math.floor(Math.random() * #{randomNum}) + #{basicWordCount};
        }
        aiTitleRefreshIcon.style.opacity = "0.2";
        aiTitleRefreshIcon.style.transitionDuration = "0.3s";
        aiTitleRefreshIcon.style.transform = "rotate(" + 360 * refreshNum + "deg)";
        if (truncateDescription.length <= 1000) {
          let param = truncateDescription.length - Math.floor(Math.random() * #{randomNum});
          while (param === prevParam) {
            param = truncateDescription.length - Math.floor(Math.random() * #{randomNum});
          }
          aiAbstract(param);
          prevParam = param;
        } else {
          aiAbstract(value);
          prevParam = value;
        }
        showAiBtn();
        refreshNum++;
      });

      document.getElementById("go-tianli-blog").addEventListener("click", () => {
        window.open("#{btnLink}", "_blank");
      });
      
      if (#{switchBtn}) {
        document.getElementById("ai-Toggle").addEventListener("click", () => {
          changeShowMode()
        });
      }

      function showAiBtn() {
        document.querySelectorAll(".ai-btn-item").forEach(item => {
          if (item.id !== "go-tianli-blog") {
            item.style.display = "block";
          }
          if (item.id === "go-tianli-blog") {
            item.style.display = "none";
          }
        });
      }


      aiAbstract();
      showAiBtn()
    })()